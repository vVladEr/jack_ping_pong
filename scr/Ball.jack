class Ball{
    field int x, y, speed;
    field Vector2 direction;
    static int radius = 3;

    constructor Ball new()
    {
        let x = 127;
        let y = 255;
        let direction = Vector.new(-1,1);
        let speed = 1;
        return this;
    }

    method int getX() 
    {
        return x;
    }

    method int getY()
    {
        return y;
    }

    method int getRadius()
    {
        return radius;
    }

    method void changeDirection(Vector2 a)
    {
        direction = Vector2.sumVectors(a, direction);
        return;
    }

    method void moveD()
    {
        if (direction.getY < 0){
            if (-direction.getY > y - radius){
                let y = - direction.getY - y + radius;
                direction.reflectY();
            }
        }
        else{
            if(direction.getY > 511 - y - radius){
                let y = 1022 - direction.getY - y - radius; 
                direction.reflectY();
            }
            else{
                let y = y + direction.getY;
            }
        }
        let x = x + direction.getX;
        return;
    }

    method void moveV()
    {
        let x = x + (direction.getX * speed);
        let y = y + (direction.getY * speed);
        return;
    }

    method void increaseSpeed()
    {
        let speed = speed + 1;
        return;
    }

    method void dispose(){
        do Memory.deAlloc(this);
        return;
    }
}
function Ball.new 0
push constant 5
call Memory.alloc 1
pop pointer 0
push constant 255
pop this 0
push constant 127
pop this 1
push constant 1
neg
push constant 1
call Vector2.new 2
pop this 3
push constant 1
pop this 2
push constant 10
pop this 4
push pointer 0
return
function Ball.copy 0
push constant 5
call Memory.alloc 1
pop pointer 0
push argument 0
call Ball.getX 1
pop this 0
push argument 0
call Ball.getY 1
pop this 1
push argument 0
call Ball.getRadius 1
pop this 4
push constant 0
push constant 0
call Vector2.new 2
pop this 3
push constant 0
pop this 2
push pointer 0
return
function Ball.getX 0
push argument 0
pop pointer 0
push this 0
return
function Ball.getY 0
push argument 0
pop pointer 0
push this 1
return
function Ball.getRadius 0
push argument 0
pop pointer 0
push this 4
return
function Ball.getDirection 0
push argument 0
pop pointer 0
push this 3
return
function Ball.changeDirection 0
push argument 0
pop pointer 0
push this 3
push argument 1
push this 3
call Vector2.sumVectors 3
pop this 3
push constant 0
return
function Ball.moveY 0
push argument 0
pop pointer 0
push this 3
call Vector2.getY 1
push constant 0
lt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push this 3
call Vector2.getY 1
neg
push this 1
push this 4
sub
gt
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push constant 2
push this 4
call Math.multiply 2
push this 3
call Vector2.getY 1
sub
push this 1
sub
pop this 1
push this 3
call Vector2.reflectY 1
pop temp 0
goto IF_END1
label IF_FALSE1
push pointer 0
call Ball.limitDirection 1
pop temp 0
push this 1
push this 3
call Vector2.getY 1
add
pop this 1
label IF_END1
goto IF_END0
label IF_FALSE0
push this 3
call Vector2.getY 1
push constant 255
push this 1
sub
push this 4
sub
gt
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push constant 510
push this 3
call Vector2.getY 1
sub
push this 1
sub
push constant 2
push this 4
call Math.multiply 2
sub
pop this 1
push this 3
call Vector2.reflectY 1
pop temp 0
goto IF_END2
label IF_FALSE2
push pointer 0
call Ball.limitDirection 1
pop temp 0
push this 1
push this 3
call Vector2.getY 1
add
pop this 1
label IF_END2
label IF_END0
push constant 0
return
function Ball.moveX 0
push argument 0
pop pointer 0
push pointer 0
call Ball.limitDirection 1
pop temp 0
push this 0
push this 3
call Vector2.getX 1
add
pop this 0
push constant 0
return
function Ball.limitDirection 2
push argument 0
pop pointer 0
push this 3
call Vector2.getX 1
pop local 0
push this 3
call Vector2.getY 1
pop local 1
push local 0
push constant 5
gt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 5
push local 1
call Vector2.new 2
pop this 3
label IF_FALSE0
push constant 5
neg
push local 0
gt
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push constant 5
neg
push local 1
call Vector2.new 2
pop this 3
label IF_FALSE1
push this 3
call Vector2.getX 1
pop local 0
push local 1
push constant 5
gt
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push local 0
push constant 5
call Vector2.new 2
pop this 3
label IF_FALSE2
push constant 5
neg
push local 1
gt
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push local 0
push constant 5
neg
call Vector2.new 2
pop this 3
label IF_FALSE3
push constant 0
return
function Ball.hitBat 3
push argument 0
pop pointer 0
push this 3
call Vector2.reflectX 1
pop temp 0
push this 0
push argument 1
call Bat.getXLT 1
lt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 2
push argument 1
call Bat.getXLT 1
call Math.multiply 2
push this 3
call Vector2.getX 1
add
push this 4
sub
push this 4
sub
push this 0
sub
pop this 0
push constant 1
neg
push constant 0
call Vector2.new 2
pop local 0
goto IF_END0
label IF_FALSE0
push constant 2
push argument 1
call Bat.getXRB 1
call Math.multiply 2
push this 3
call Vector2.getX 1
add
push this 4
add
push this 4
add
push this 0
sub
pop this 0
push constant 1
push constant 0
call Vector2.new 2
pop local 0
label IF_END0
push constant 0
push constant 0
call Vector2.new 2
pop local 1
push argument 2
push constant 131
eq
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push constant 0
push constant 1
neg
call Vector2.new 2
pop local 1
goto IF_END1
label IF_FALSE1
push argument 2
push constant 133
eq
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push constant 0
push constant 1
call Vector2.new 2
pop local 1
label IF_FALSE2
label IF_END1
push local 0
push local 0
push local 1
call Vector2.sumVectors 3
pop local 2
push this 3
push this 3
push local 2
call Vector2.sumVectors 3
pop this 3
push constant 0
return
function Ball.draw 0
push argument 0
pop pointer 0
push constant 0
not
call Screen.setColor 1
pop temp 0
push this 0
push this 1
push this 4
call Screen.drawCircle 3
pop temp 0
push constant 0
return
function Ball.erase 0
push argument 0
pop pointer 0
push constant 0
call Screen.setColor 1
pop temp 0
push this 0
push this 1
push this 4
call Screen.drawCircle 3
pop temp 0
push constant 0
return
function Ball.dispose 0
push argument 0
pop pointer 0
push this 3
call Vector2.dispose 1
pop temp 0
push pointer 0
call Memory.deAlloc 1
pop temp 0
push constant 0
return
